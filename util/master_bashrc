# Customized .bash_profile for login bash(1) shells.
if [ -z "$PS1" ]; then
  return
fi

PATH=$PATH:/usr/local/bin
PS1='\h:\W \u\$ '
# Make bash check its window size after a process completes
shopt -s checkwinsize
# Tell the terminal about the working directory at each prompt.
if [ "$TERM_PROGRAM" == "Apple_Terminal" ] && [ -z "$INSIDE_EMACS" ]; then
   update_terminal_cwd() {
       # Identify the directory using a "file:" scheme URL,
       # including the host name to disambiguate local vs.
       # remote connections. Percent-escape spaces.
	local SEARCH=' '
	local REPLACE='%20'
	local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
	printf '\e]7;%s\a' "$PWD_URL"
   }
   PROMPT_COMMAND="update_terminal_cwd; $PROMPT_COMMAND"
fi

# .bashrc

export PATH=/bin:/sbin:/usr/bin:/usr/local/bin:/usr/sbin:~/bin:/usr/local/mysql/bin:/opt/local/lib/mysql5/bin/:/opt/local/bin:/opt/local/sbin:/opt/local/apache2/bin/:$PATH

alias vm='cd ~/Vagrant-VMs/'
alias en='cd ~/work/etna2/'
alias bn='cd ~/work/bitna/'
alias gdrive='cd ~/Google\ Drive/'
alias server='thin start -a 127.0.0.1'
alias log='tail -f log/development.log'
alias vim='vim -u /etc/vimrc'
alias vi='vim -u /etc/vimrc'
alias ls='ls -G'
alias lsa='ls -FlaGh'
alias ll='ls -FlaGh'
alias rm='rm -i'
alias grep='grep --color'
alias battle='open -a /Applications/Battle.net.app/Contents/MacOS/Battle.net.sh'
alias c='clear'
alias top='top -o cpu'
alias sudo='sudo '
alias ws='ssh work'
alias shrug="echo  \"¯\_(ツ)_/¯\""
alias ub="cd ~/work/FP-Ubuntu-VM; vagrant ssh"
export PAGER=less
export EDITOR='vim -u /etc/vimrc'

# Erase duplicates
export HISTCONTROL=erasedups
# resize history size
export HISTSIZE=20000
# append to bash_history if Terminal.app quits
shopt -s histappend

#default colors (see man ls)
export LSCOLORS="exfxcxdxbxegedabagacad"
#export LSCOLORS="gxfxcxdxbxegedabagacad"

#export LS_OPTIONS='--color=auto'
#eval `dircolors`
#alias ls='ls $LS_OPTIONS'

# Login greeting ------------------
if [ "$TERM" = "screen" -a ! "$SHOWED_SCREEN_MESSAGE" = "true" ]; then
 detached_screens=`screen -list | grep Detached`
 if [ ! -z "$detached_screens" ]; then
   echo "+---------------------------------------+"
   echo "| Detached screens are available:       |"
   echo "$detached_screens"
   echo "+---------------------------------------+"
 else
   echo "[ screen is activated ]"
 fi
 export SHOWED_SCREEN_MESSAGE="true"
fi

## dark background: uppercase;
## light background: lowercase
gray='\e[0;30m'
GRAY='\e[1;30m'
red='\e[0;31m'
RED='\e[1;31m'
green='\e[0;32m'
GREEN='\e[1;32m'
yellow='\e[0;33m'
YELLOW='\e[1;33m'
blue='\e[0;34m'
BLUE='\e[1;34m'
cyan='\e[0;36m'
CYAN='\e[1;36m'
violet='\e[0;35m'
VIOLET='\e[1;35m'
white='\e[0;37m'
WHITE='\e[1;37m'
NC='\e[0m' # No Color
# make sure to end with "NC" to restore normal coloring

# use this to highlight the prompt of an unexpected user (doesn't need bash_colors):
#  PS1="\n=\e[1;31mAPACHE USER\e[0m=\n[\u@\h \e[1;35m\w\e[0m] \n\\\$ "

parse_git_branch() {
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'
}

case "$TERM" in
xterm-color)
	PS1="\n${NC}[${cyan}\u${GRAY}@${blue}\h${GRAY}:${RED}\w${GREEN}\$(parse_git_branch)${NC}]${NC} \n\\\$ "
   ;;
xterm-256color)
	PS1="\n${NC}[${cyan}\u${GRAY}@${blue}\h${GRAY}:${RED}\w${GREEN}\$(parse_git_branch)${NC}]${NC} \n\\\$ "
   ;;
xterm)
	PS1="\n${NC}[${cyan}\u${GRAY}@${blue}\h${GRAY}:${RED}\w${GREEN}\$(parse_git_branch)${NC}]${NC} \n\\\$ "
   ;;

screen)
	PS1="\n${NC}=${CYAN}SCREEN${NC}=\n${NC}[${cyan}\u${gray}@${blue}\h: ${RED}\w${NC}]${NC} \n\\\$ "
	;;

*)
	#PS1='\h:\W \$ '
   PS1='\h:\W \$ '
   ;;
esac

PS2="${BLUE}$0 ${NC}(${RED}\#${NC}) ${NC}\$> "

unset SSH_AUTH_SOCK

export PATH=$PATH:.
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
